date
wed
nov
gmt
server
apache
content
type
text
html
content
length
last
modified
wed
nov
gmt
systems
programming
home
page
systems
programming
home
page
fall
last
updated
november
the
optional
final
exam
for
this
course
is
scheduled
for
monday
afternoon
dec
at
pm
it
will
be
minutes
open
book
open
notes
alert
i
have
made
some
modifications
to
the
spec
for
project
read
the
changes
by
clicking
here
contents
course
information
grading
schedule
projects
sample
programs
from
first
half
of
class
sample
motif
programs
code
from
the
text
other
motif
and
x
resources
exam
information
kerberos
resources
afs
notes
miscellaneous
resources
course
information
instructor
robert
ingalls
executive
officer
computer
science
dept
amos
eaton
phone
email
ingalr@rpi.edu
or
ingallsr@cs.rpi
edu
office
hours
tu
th
texts
advanced
programming
in
the
unix
environment
by
w
richard
stevens
addison
wesley
the
x
window
system
programming
and
applications
with
xt
by
douglas
a
young
prentice
hall
teaching
assistants
lakshmi
bhat
amos
eaton
email
bhatl@cs.rpi
edu
office
hours
m
w
corey
bufi
amos
eaton
email
bufic@cs.rpi
edu
office
hours
m
w
this
course
introduces
students
to
the
basic
concepts
of
systems
programming
including
system
calls
files
and
i
o
process
management
interprocess
communication
networking
concurrent
programming
and
graphics
using
x
windows
particular
emphasis
will
be
placed
on
the
implementation
of
these
concepts
in
unix
but
other
operating
system
implementations
will
also
be
covered
prerequisites
students
are
assumed
to
be
able
to
program
in
c
and
to
have
a
basic
understanding
of
data
structures
and
assembler
language
programming
grading
there
will
be
two
tests
and
six
programming
assignments
each
of
the
tests
will
count
of
the
course
grade
the
program
assignments
will
be
of
varying
weights
depending
on
their
degree
of
difficulty
but
they
will
total
there
will
be
no
make
up
exams
however
there
will
be
an
optional
comprehensive
final
exam
which
can
be
used
to
replace
a
missing
test
or
project
or
your
lowest
test
or
project
academic
integrity
all
programs
submitted
must
be
your
own
work
and
you
are
expected
to
develop
your
programs
independently
you
may
receive
as
much
help
as
you
wish
on
the
use
of
the
operating
system
text
editors
debuggers
file
transfer
protocols
and
so
on
you
may
consult
with
other
members
of
the
class
about
interpreting
the
assignment
and
you
may
get
help
in
finding
bugs
but
not
fixing
bugs
but
you
are
not
allowed
to
look
at
or
copy
another
person
s
code
or
discuss
design
decisions
with
others
and
you
cannot
show
your
code
to
others
students
found
to
be
in
violation
of
these
guidelines
will
fail
the
project
and
will
be
reported
to
the
dean
programming
assignments
this
is
a
programming
intensive
course
and
students
are
expected
to
be
strong
c
programmers
assignments
may
be
done
in
either
c
or
c
while
you
may
use
whatever
platforms
or
compilers
you
wish
to
develop
your
code
all
code
submitted
must
run
on
both
sun
and
aix
platforms
on
rcs
and
must
compile
without
errors
or
significant
warnings
using
gcc
wall
assignments
will
be
submitted
by
e
mailing
source
code
to
the
ta
multiple
files
should
be
bundled
using
shar
you
must
submit
a
make
file
with
each
assignment
there
will
be
ten
point
per
day
penalty
for
lateness
schedule
this
schedule
is
tentative
and
should
not
be
taken
too
literally
i
will
sometimes
be
ahead
of
this
sometimes
behind
it
and
sometimes
completely
off
of
it
schedule
of
topics
date
topics
reading
tu
aug
unix
standards
posix
debugging
shar
stevens
ch
th
aug
structure
of
a
c
program
compiling
linking
make
libraries
concept
of
a
system
call
errno
stevens
ch
tu
sep
i
o
files
file
system
calls
stevens
ch
th
sep
files
and
directories
more
system
calls
stevens
ch
tu
sep
process
concepts
fork
exec
etc
stevens
ch
th
sep
process
group
relations
daemon
processes
stevens
ch
tu
sep
signals
stevens
ch
th
sep
interprocess
communication
pipes
fifos
stevens
ch
tu
sep
concurrency
concepts
none
th
sep
concurrency
in
unix
semaphores
file
locks
shared
memory
stevens
ch
tu
oct
examples
a
postscript
printer
a
database
library
stevens
ch
th
oct
the
client
server
model
sockets
online
reading
tu
oct
more
on
sockets
the
internet
review
none
th
oct
exam
none
th
oct
design
of
clients
and
servers
tu
oct
intro
to
networking
protocol
stacks
th
oct
the
internet
ip
tu
oct
tcp
and
udp
th
oct
security
kerberos
tu
nov
overview
of
the
x
window
system
young
ch
th
nov
primitive
motif
widgets
young
ch
tu
nov
manager
widgets
young
ch
th
nov
menus
and
dialogs
young
ch
tu
nov
events
young
ch
th
nov
graphics
color
fonts
bitmaps
young
ch
tu
nov
creating
your
own
widgets
young
ch
tu
dec
review
th
dec
exam
projects
general
project
guidelines
all
projects
should
follow
guidelines
for
good
programming
practices
here
is
my
list
your
program
should
have
a
comment
at
the
top
with
your
name
login
id
a
brief
description
of
what
the
program
is
and
any
special
compiling
instructions
main
should
be
like
an
executive
in
a
company
it
should
not
do
any
work
but
it
should
delegate
work
to
other
functions
most
functions
should
be
short
and
each
should
do
only
one
thing
no
function
should
ever
be
more
than
lines
each
function
should
have
a
brief
comment
describing
what
it
does
it
is
not
necessary
to
comment
every
line
and
if
your
code
is
well
written
it
should
not
require
a
lot
of
in
line
commenting
however
you
should
use
comments
to
describe
any
unusual
code
or
hard
to
follow
code
or
complicated
code
and
describe
any
non
obvious
variables
variables
and
functions
should
have
meaningful
names
but
you
can
use
single
letters
like
i
for
loop
counters
and
such
you
should
check
the
return
code
for
any
system
call
that
can
fail
and
have
an
appropriate
error
handler
your
code
should
have
enough
error
checking
so
that
no
matter
what
the
user
does
your
program
will
not
seg
fault
or
loop
forever
or
do
other
strange
things
it
is
very
hard
to
make
your
program
idiot
proof
idiots
are
very
clever
all
code
must
be
written
by
you
and
you
alone
except
that
you
can
use
and
modify
any
sample
code
from
the
text
or
from
class
as
long
as
you
provide
credit
to
the
source
about
project
about
project
about
project
about
project
about
project
about
project
if
you
have
problems
or
suggestions
send
mail
to
sysprog@cs.rpi
edu
miscellaneous
resources
at
the
request
of
one
of
the
students
here
is
a
link
to
a
list
of
all
of
the
rfcs
request
for
comments
this
contains
protocols
for
many
common
network
services
as
well
as
other
standards
for
the
internet
