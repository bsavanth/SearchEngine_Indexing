date
wed
nov
gmt
server
apache
content
type
text
html
content
length
last
modified
tue
nov
gmt
c311
fall
indiana
university
computer
science
department
c311
programming
languages
fall
general
information
overview
textbooks
syllabus
assignments
tools
and
advise
grading
administrivia
course
evaluation
general
information
instructor
christopher
t
chris
haynes
email
chaynes@indiana.edu
associate
instructor
gustavo
gomez
email
ggomezes@cs.indiana
edu
credit
hours
requirements
c335
prerequisite
and
c343
pre
or
corequisite
lecture
section
meets
tuesday
and
thursday
p
to
p
in
lh102
discussion
sections
section
meets
monday
p
to
p
in
se245
section
meets
wednesday
p
to
p
in
li451
office
hours
tuesday
a
to
p
in
lh
f
chris
haynes
a
to
p
in
lh
f
chris
haynes
thursday
a
to
a
in
lh230
gustavo
gomez
a
to
p
in
lh
f
chris
haynes
a
to
p
in
lh
f
chris
haynes
local
newsgroup
ac
c
web
url
http://www.cs.indiana.edu/classes/c311/
catalog
description
systematic
approach
to
programming
languages
relationships
among
languages
properties
and
features
of
languages
and
the
computer
environment
necessary
to
use
languages
overview
this
course
provides
an
introduction
to
the
foundations
of
programming
languages
allowing
a
thorough
understanding
of
programming
language
semantics
and
critical
implementation
characteristics
this
provides
the
basis
for
the
best
choice
and
use
of
existing
languages
as
well
as
language
design
interpreters
and
other
language
processing
programs
are
used
throughout
to
present
the
essential
elements
of
programming
languages
in
a
precise
analytic
manner
the
extensive
use
of
interpreters
in
this
course
also
develops
skill
in
meta
linguistic
abstraction
a
powerful
programming
paradigm
to
thoroughly
understand
programming
languages
or
most
any
topic
it
is
necessary
to
have
a
variety
of
models
or
views
at
varying
levels
of
abstraction
in
this
course
we
will
employ
a
range
of
models
from
very
high
level
almost
mathematical
semantics
to
very
low
level
almost
assembly
language
and
emphasize
the
connections
between
levels
scheme
is
used
as
a
meta
programming
language
throughout
the
course
but
this
course
is
about
fundamentals
that
are
the
basis
for
most
programming
languages
not
just
scheme
special
attention
will
be
given
to
modeling
the
semantics
of
the
java
language
via
a
series
of
type
checkers
and
interpreters
a
slide
presentation
available
in
condensed
form
summarizes
these
points
and
others
topics
include
induction
recursion
and
scope
direct
semantics
interpreters
continuation
passing
style
continuation
semantics
interpreter
imperative
form
and
stack
architecture
static
and
dynamic
semantics
for
object
oriented
programming
object
oriented
run
time
architecture
materials
required
essentials
of
programming
languages
by
friedman
wand
and
haynes
this
text
known
hereafter
as
eopl
should
be
available
in
any
of
the
three
big
textbook
bookstores
t
i
s
aristotle
s
or
the
i
u
bookstore
but
you
may
get
it
cheaper
if
you
can
find
a
grad
or
undergrad
student
who
s
taken
c311
or
c511
and
is
willing
to
part
with
it
recommended
the
little
schemer
by
friedman
and
felleisen
this
should
also
be
available
in
the
bookstores
and
a
couple
copies
are
on
reserve
in
the
swain
hall
library
the
little
lisper
is
older
but
similar
other
other
materials
may
be
required
through
the
semester
these
materials
will
be
announced
in
class
and
will
be
made
available
through
the
white
rabbit
on
indiana
near
kirkwood
and
will
cost
a
few
dollars
to
cover
copying
costs
syllabus
read
the
indicated
material
for
each
week
before
the
week
begins
you
are
not
expected
to
understand
the
material
on
first
reading
but
having
read
it
once
first
you
will
be
much
better
prepared
for
class
and
discussion
sections
read
the
material
for
the
first
two
weeks
in
the
first
week
much
of
it
should
be
review
more
material
on
java
will
be
made
available
later
links
in
the
list
below
are
to
the
lecture
scripts
week
of
september
re
introduction
to
scheme
eopl
preface
and
chapter
chapter
through
section
and
chapter
through
section
week
of
september
static
properties
of
programs
eopl
remainder
of
chapters
and
week
of
september
quiz
imperative
programming
chapter
sections
and
simple
interpreters
eopl
chapter
through
section
week
of
september
local
binding
procedures
and
assignment
eopl
sections
through
week
of
september
recursion
and
dynamic
scope
eopl
rest
of
chapter
weeks
of
october
continuation
passing
style
eopl
chapter
sections
and
week
of
october
cps
rules
eopl
chapter
sections
and
first
exam
week
of
october
representation
independent
interpreter
continuations
as
records
and
reified
continuations
eopl
sections
through
first
class
continuations
and
exception
handling
week
of
october
imperative
form
and
control
stack
architecture
eopl
sections
and
thoroughly
week
of
november
environment
stack
architecture
eopl
rest
of
chapter
for
general
information
not
responsible
for
code
details
paramater
passing
eopl
chapter
not
responsible
for
material
involving
arrays
week
of
november
second
exam
introduction
to
object
oriented
programming
and
java
eopl
section
week
of
november
java
programming
tutorial
static
methods
only
java
type
checker
and
interpreter
week
of
november
thanksgiving
break
week
of
december
more
object
oriented
programming
java
style
eopl
section
for
general
information
also
emphasis
on
the
importance
of
virtual
member
functions
in
c
as
illustrated
by
virtual
c
week
of
december
advanced
java
topics
classes
attendance
at
discussion
sections
is
mandatory
usually
a
problem
or
set
of
problems
will
be
given
out
at
the
beginning
of
discussion
section
and
the
class
will
be
broken
up
into
small
groups
to
solve
the
problems
the
ai
leading
the
discussion
section
will
go
between
groups
answering
questions
and
asking
questions
about
the
work
done
so
far
and
about
the
class
material
your
answers
to
these
questions
and
your
progress
on
the
problems
given
in
discussion
section
will
count
toward
your
final
grade
some
lectures
may
also
be
conducted
in
this
manner
and
some
other
lectures
will
present
material
not
found
in
the
book
don
t
miss
class
assignments
for
the
most
part
assignments
will
be
handed
in
by
email
to
an
automatic
checker
with
feedback
emailed
back
almost
immediately
assignments
may
be
prepared
on
the
system
of
your
choice
but
should
run
properly
using
chez
scheme
version
homework
will
be
graded
by
hand
but
the
automatic
checker
will
detect
some
errors
an
assignment
will
usually
be
given
each
week
assignments
will
be
added
to
the
list
below
by
p
on
friday
and
due
before
p
the
next
friday
late
assignments
will
not
be
accepted
assignment
due
solution
basic
scheme
f
pm
a1
ss
static
properties
f
pm
a2
ss
simple
interpreter
f
pm
a3
ss
procedures
and
assignment
f
pm
a4
ss
recursion
and
dynamic
scope
f
pm
a5
ss
exam
in
class
on
r
no
assignment
solution
cps
transformation
f
pm
a6
ss
cps
with
abstract
continuations
f
pm
a7
ss
cps
with
registers
and
stacks
f
pm
solution
exam
in
class
on
r
no
assignment
solution
call
by
value
call
by
reference
t
pm
tools
and
advise
our
web
has
information
on
use
of
scheme
at
iu
including
emacs
support
we
will
be
using
a
few
scheme
extensions
not
mentioned
in
eopl
points
will
be
deducted
on
the
homework
quiz
and
exams
if
the
cardinal
rules
of
indentation
are
violated
so
make
it
a
habit
to
follow
them
whenever
you
write
scheme
code
this
will
greatly
aid
your
scheme
programming
though
emacs
is
a
big
help
it
is
strongly
suggested
that
you
write
solutions
to
all
exercises
by
hand
and
check
them
carefully
for
correctness
before
approaching
a
computer
this
will
give
you
practice
at
indentation
by
hand
which
is
necessary
for
exams
and
more
importantly
it
is
in
most
cases
much
easier
to
find
mistakes
in
this
course
s
exercises
by
thinking
about
them
than
by
debugging
the
assignments
don
t
count
a
whole
lot
toward
your
grade
but
extensive
experience
has
shown
that
students
who
do
not
make
a
serious
effort
to
do
the
assignments
independently
do
poorly
on
exams
experience
has
also
shown
that
if
most
students
spent
much
more
time
with
paper
and
pencil
before
approaching
a
computer
they
would
spend
much
less
time
debugging
and
better
understand
their
programs
an
hour
with
a
pencil
is
often
worth
several
at
the
keyboard
grading
the
following
is
a
tentative
schedule
for
evaluation
with
approximate
percentage
contributions
to
the
final
grade
self
assessment
quizette
percent
scheme
quiz
r
september
in
class
percent
write
in
minutes
several
programs
similar
to
those
in
the
first
assignment
answers
exam
one
r
october
in
class
on
eopl
chapters
through
percent
a
sample
exam
from
last
spring
is
available
exam
two
r
november
in
class
on
material
covered
in
class
through
t
november
does
not
include
chapter
parameter
passing
percent
a
sample
exam
from
last
spring
is
available
final
exam
t
december
p
p
lh102
percent
the
final
will
cover
the
whole
course
with
emphasis
on
material
after
the
second
exam
a
sample
final
from
last
spring
is
available
assignments
percent
subjective
assessment
based
on
attendance
participation
and
preparation
for
lectures
and
discussion
sessions
percent
the
sample
exams
are
provided
only
to
provide
a
general
idea
of
what
to
expect
the
content
of
the
course
this
semester
differs
somewhat
especially
after
the
second
exam
administrivia
incompletes
an
incomplete
i
final
grade
will
be
given
only
by
prior
arrangement
in
exceptional
circumstances
conforming
to
departmental
policy
in
which
the
bulk
of
course
work
has
been
completed
in
passing
fashion
possibly
important
dates
m
september
last
day
to
pass
fail
the
course
w
october
last
day
to
drop
the
course
on
your
own
w
december
last
day
to
drop
the
course
with
a
dean
s
approval
academic
integrity
for
your
ethical
pleasure
you
should
read
the
computer
science
department
statement
on
academic
integrity
it
s
dry
but
important
course
evaluation
before
the
end
of
the
semester
please
complete
the
electronic
course
evaluation
forms
for
chris
haynes
and
your
discussion
section
ai
gustavo
gomez
chris
haynes
chaynes@indiana.edu
