date
wednesday
nov
gmt
server
ncsa
mime
version
content
type
text
html
last
modified
friday
oct
gmt
content
length
high
performance
synchronization
nsf
grant
ccr
high
performance
synchronization
for
shared
memory
parallel
programs
computer
science
department
university
of
rochester
rochester
ny
through
with
increases
in
the
size
and
availability
of
parallel
processors
with
shared
memory
programming
models
high
performance
synchronization
is
becoming
increasingly
important
several
groups
including
ours
have
demonstrated
in
recent
years
that
software
synchronization
algorithms
can
scale
well
to
very
large
numbers
of
processors
and
that
they
can
avoid
certain
negative
interactions
with
high
performance
scheduling
algorithms
we
are
continuing
this
research
in
several
directions
including
mechanisms
for
cooperative
synchronization
and
scheduling
which
minimize
unnecessary
spinning
maximize
processor
locality
and
avoid
contention
for
both
lock
and
non
lock
data
comparative
evaluation
of
alternative
mechanisms
for
atomic
update
of
shared
data
structures
including
locks
non
blocking
synchronization
and
function
shipping
implementation
of
atomic
hardware
primitives
on
scalable
architectures
evaluation
of
the
interaction
of
synchronization
with
coherence
and
new
synchronization
algorithms
principal
investigator
michael
l
scott
associate
professor
and
department
chair
scott@cs.rochester
edu
recent
graduates
leonidas
kontothanassis
bob
wisniewski
graduate
students
maged
michael
galen
hunt
srinivasan
parthasarathy
publications
project
specific
papers
systems
technical
report
archive
pseudocode
scalable
spinlocks
and
barriers
includes
test
and
set
and
ticket
locks
queue
locks
and
centralized
tree
based
and
fft
style
butterfly
barriers
from
the
tocs
paper
scalable
busy
wait
reader
writer
locks
includes
reader
preference
writer
preference
and
fair
locks
from
the
ppopp
paper
scalable
adaptive
combining
tree
barriers
combine
local
only
spinning
logarithmic
critical
paths
amortization
of
overhead
for
skewed
arrival
and
fuzziness
from
the
ijpp
paper
variations
on
lamport
s
fast
mutual
exclusion
lock
use
no
atomic
instructions
other
than
read
and
write
from
ur
tr
submitted
for
publication
preemption
safe
and
scheduler
conscious
synchronization
algorithms
includes
two
queue
based
mutual
exclusion
locks
test
and
set
and
ticket
locks
a
fair
scalable
queue
based
reader
writer
lock
competitive
and
optimal
time
small
scale
barriers
and
a
scalable
barrier
all
algorithms
avoid
busy
waiting
for
action
by
preempted
processes
including
those
waiting
in
line
for
a
fifo
queue
or
ticket
lock
most
employ
a
widened
kernel
user
interface
revised
from
ur
tr
to
appear
in
acm
tocs
a
highly
concurrent
multi
lock
concurrent
priority
queue
uses
bottom
up
insertions
and
bit
reversal
choice
among
fringe
nodes
fast
concurrent
queue
algorithms
we
believe
these
algorithms
to
be
the
best
concurrent
queues
available
for
almost
any
application
executable
code
basic
and
scalable
spinlocks
and
barriers
code
to
run
on
the
sequent
symmetry
bbn
butterfly
and
bbn
tc2000
scalable
busy
wait
reader
writer
locks
code
to
run
on
the
bbn
tc2000
scalable
adaptive
combining
tree
barriers
code
to
run
on
the
bbn
butterfly
bbn
tc2000
and
kendall
square
ksr
variations
on
lamport
s
fast
mutual
exclusion
lock
code
to
run
on
the
silicon
graphics
iris
preemption
safe
and
scheduler
conscious
synchronization
algorithms
code
to
run
on
the
kendall
square
ksr
and
silicon
graphics
challenge
a
highly
concurrent
multi
lock
concurrent
priority
queue
code
to
run
on
the
sgi
challenge
fast
concurrent
queue
algorithms
includes
sgi
challenge
code
for
our
two
lock
and
non
blocking
queues
and
for
previous
algorithms
by
other
researchers
last
change
august
scott@cs.rochester
edu
